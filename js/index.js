function loadImage(url) {
  return new Promise(resolve => {
    const image = new Image();
    image.addEventListener('load', () => {
      resolve(image);
    });
    image.src = url;
  });
}


const blockSize = 32;


var canvas = document.querySelector("canvas");

// canvas.width = window.innerWidth;
// canvas.height = window.innerHeight;

canvas.width = (blockSize * 16);
canvas.height = (blockSize * 16);


var c = canvas.getContext("2d");

c.fillStyle = "#000";
c.fillRect(0, 0, canvas.width, canvas.height);



const map = [
  [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
  [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
  [11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11],
  [11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 11, 11],
  [11, 11, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11],
  [11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11],
  [11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11],
  [0, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0],
  [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2],
  [11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 11, 11],
  [11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11],
  [11, 11, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11],
  [11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 11],
  [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13],
]

const map2 = [
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1],
  [1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
  [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
  [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2],
  [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2],
  [0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2],
  [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
]



// console.log(fullBlock2[x]);

// let arrayNum = 0;
let curY2 = 0;
map.forEach((row, y) => {
  row.forEach((block, x) => {
    let fullBlock = block * blockSize;
    let blockPlacey = y * blockSize;
    let blockPlacex = x * blockSize;
    loadImage('img/RPG_path.png').then(image => {
      curY2 = map2[y];
      curX2 = (curY2[x] * blockSize);
      c.drawImage(image,
        curX2, fullBlock,
        blockSize, blockSize,

        blockPlacex, blockPlacey,
        blockSize, blockSize)
    })
  })
})






setTimeout(Boat, 1);

function Boat() {


const map3 = [
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [10, 4], [9, 9], [9, 10], [10, 5], [8, 9], [8, 10], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [10, 6], [10, 4], [-1, -1], [9, 9], [9, 10], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [0, 12], [0, 13]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 12], [1, 13]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [2, 12], [2, 13]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [14, 0], [14, 1], [14, 2], [14, 3], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [10, 8]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [15, 0], [15, 1], [15, 2], [15, 3], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [10, 9], [10, 10], [10, 11], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 9], [11, 10], [11, 11], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
  [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 9], [11, 10], [11, 11], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]],
]

map3.forEach((row, y) => {
  row.forEach((block, x) => {
      let fullBlockY = block[0] * blockSize;
      let fullBlockX = block[1] * blockSize;
      let blockPlacey = y * blockSize;
      let blockPlacex = x * blockSize;
      loadImage('img/RPG_path.png').then(image => {
        c.drawImage(image,
          fullBlockX, fullBlockY,
          blockSize, blockSize,

          blockPlacex, blockPlacey,
          blockSize, blockSize)
    })
  })
})



}
